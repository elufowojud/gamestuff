from concurrent.futures import ThreadPoolExecutor, as_completed
from random import choice
from math import inf


def fun3(U, E):
    # U is a list and E is a list of sublists of U.
    C = []
    if len(U) != 0:
        Enew = E.copy()
        covered = []
        while len(covered) != len(U):
            if len(Enew) == 0:
                raise Exception("U cannot be covered by E.")
            Eselected = choice(Enew)
            C.append(Eselected)
            Enew.remove(Eselected)
            for u in Eselected:
                if not u in covered:
                    covered.append(u)
    return C


def fun4(U, E, C):
    covered = []
    for Ei in C:
        for u in Ei:
            if not u in covered:
                covered.append(u)
    score = len(C)
    for u in U:
        if not u in covered:
            score = score + (len(E) + 1)
    best_C = C.copy()
    best_score = score
    for Ei in E:
        new_C = C.copy()
        if Ei in C:
            new_C.remove(Ei)
        else:
            new_C.append(Ei)
        covered = []
        for Ej in new_C:
            for u in Ej:
                if not u in covered:
                    covered.append(u)
        score = len(new_C)
        for u in U:
            if not u in covered:
                score = score + (len(E) + 1)
        if score < best_score:
            best_C = new_C.copy()
            best_score = score
    return best_C


def fun5_parallel(U, E):
    # Generate the initial pool of solutions in parallel
    with ThreadPoolExecutor() as executor:
        # Generate initial C_pool with parallelized fun3
        futures = [executor.submit(fun3, U, E) for _ in range(2)]
        C_pool = [future.result() for future in as_completed(futures)]

    for _ in range(3):  # Optimize solutions for 3 iterations
        with ThreadPoolExecutor() as executor:
            # Optimize solutions in parallel using fun4
            futures = [executor.submit(fun4, U, E, C_pool[j]) for j in range(len(C_pool))]
            C_pool = [future.result() for future in as_completed(futures)]

    # Evaluate and find the best solution
    best_score = inf
    best_C = None
    for C in C_pool:
        covered = []
        for Ei in C:
            for u in Ei:
                if not u in covered:
                    covered.append(u)
        score = len(C)
        for u in U:
            if not u in covered:
                score = score + (len(E) + 1)
        if score < best_score:
            best_C = C.copy()
            best_score = score

    return best_C


# Example of input
U1 = [i + 1 for i in range(4)]
E1 = [[1, 2], [3, 4], [2]]

if __name__ == "__main__":
    print(fun5_parallel(U1, E1))
